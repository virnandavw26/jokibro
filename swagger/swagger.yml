openapi: 3.0.0
info:
  description: swab Online
  version: 1.0.0
  title: swab Online
  contact:
    email: ahmadshobirin.dev@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

tags:
- name: Auth
  description: Authentication Api
- name: User
  description: User Api
- name: City
  description: City Api
- name: Clinic
  description: Clinic Api
- name: Transaction
  description: Transaction Api

paths:
  /auth/login:
    post:
      tags:
      - Auth
      summary: login users
      description: |
        Passing Username And Password to get Token JWT
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'OK'
                  data:
                    $ref: '#/components/schemas/JWT'
        400:
          description: invalid input, object invalid
  /auth/register:
    post:
      tags:
      - Auth
      summary: Register users
      description: |
        send some data for register
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Ahmad Shobirin
                email:
                  type: string
                  format: email
                  example: ahmadshobirin@alterra.com
                password:
                  type: string
                  example: k!UUdja21Sxh
                date_of_birth:
                  type: string
                  format: date
                  example: 1999-01-01
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'OK'
                  data:
                    $ref: '#/components/schemas/JWT'
        400:
          description: Bad Request
  /user/profile:
    get:
      security:
        - bearerAuth: []
      tags:
      - User
      summary: Retrive data user by token
      description: |
        send some data
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'OK'
                  data:
                    $ref: '#/components/schemas/User'
        400:
          description: Bad Request

  /city:
   get:
    security:
        - bearerAuth: []
    tags:
    - City
    summary: Retrive data City
    responses:
      200:
        description: A list of city
        content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'OK'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/City'
      400:
        description: Bad Request
   post:
    security:
        - bearerAuth: []
    tags:
    - City
    summary: Save Data City
    requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
    responses:
      200:
        description: A list of users
        content:
          application/json:
            schema:
              type: object
              properties:
                status_code:
                  type: integer
                  example: 200
                message:
                  type: string
                  example: 'OK'
                data:
                  type: object
      400:
        description: Bad Request
  /city/{cityID}/edit:
    put:
     security:
        - bearerAuth: []
     tags:
      - City
     summary: Retrive data City by ID
     parameters:
        - in: path
          name: cityID
          schema:
            type: integer
          required: true
          description: Numeric ID of the city to get
     requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
     responses:
      200:
        description: A list of city
        content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'OK'
                  data:
                    type: object
                    $ref: '#/components/schemas/City'
      400:
        description: Bad Request
  /city/{cityID}:
    get:
     security:
        - bearerAuth: []
     tags:
      - City
     summary: Retrive data City by ID
     parameters:
        - in: path
          name: cityID
          schema:
            type: integer
          required: true
          description: Numeric ID of the city to get
     responses:
      200:
        description: A list of city
        content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'OK'
                  data:
                    type: object
                    $ref: '#/components/schemas/City'
      400:
        description: Bad Request
    delete:
     security:
        - bearerAuth: []
     tags:
      - City
     summary: Delete City by ID
     parameters:
        - in: path
          name: cityID
          schema:
            type: integer
          required: true
          description: Numeric ID of the city to get
     responses:
      200:
        description: A list of city
        content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'OK'
                  data:
                    type: object
      400:
        description: Bad Request

components:
  securitySchemes:
    bearerAuth:
      type: http

      scheme: bearer
      bearerFormat: JWT
  schemas:
    Login:
      type: object
      required:
      - email
      - password
      properties:
        email:
          type: string
          example: jhon@doe@gmail.com
        password:
          type: string
          example: QwanjjaseuQeq
          description: encrypted password AES
    JWT:
      type: object
      required:
      - token
      - expire_token
      - refresh_token
      - expire_refresh_token
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.|eyJleHAiOjE2Mjg1MTA1NzcsImp0aSI6ImV5SmhiR2NpT2l a7C6ZcazsgjdKXR2eXOPRzBhRv99NOaDMNN2gyYDE2Y
        expire_token:
          type: string
          example: 2021-08-09T12:02:57Z
          format: date-time
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.|eyJleHAiOjE2Mjg1MTA1NzcsImp0aSI6ImV5SmhiR2NpT2l a7C6ZcazsgjdKXR2eXOPRzBhRv99NOaDMNN2gyYDE2Y
        expire_refresh_token:
          type: string
          example: 2021-08-09T12:02:57Z
          format: date-time
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        role_id:
          type: integer
          example: 1
        role:
          type: string
          example: admin
        name:
          type: string
          example: ahamad Shobirin
        email:
          type: string
          example: ahmadshobirin@alterra.com
        created_at:
          type: string
          format: date-time
          example: 2021-08-09T12:02:57Z
        updated_at:
          type: string
          format: date-time
          example: 2021-08-09T12:02:57Z
    City:
      type: object
      properties:
        id:
          type: integer
          example: 1
        code:
          type: string
          example: SBY
        name:
          type: string
          example: Surabaya
        created_at:
          type: string
          format: date-time
          example: 2021-08-09T12:02:57Z
        updated_at:
          type: string
          format: date-time
          example: 2021-08-09T12:02:57Z
    Clinic:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        user:
          type: string
          example: Admin Cabang Sidoarjo
        city_id:
          type: integer
          example: 1
        city:
          type: string
          example: Surabaya
        name:
          type: string
          example: CABANG Sidoarjo
        open:
          type: string
          format: time
          example: 08:15
        close:
          type: string
          format: time
          example: 08:15
        created_at:
          type: string
          format: date-time
          example: 2021-08-09T12:02:57Z
        updated_at:
          type: string
          format: date-time
          example: 2021-08-09T12:02:57Z
security:
  - bearerAuth: []
